
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Game/Scripts/hex-lines-game/base/com.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'e25bakBQd9I5LmDR7yLx+Jf', 'com');
// Game/Scripts/hex-lines-game/base/com.js

"use strict";

var com = function com() {};
com.dateStr = function (t) {
  var e = t.getMonth() + 1,
    n = t.getDate(),
    i = t.getHours(),
    s = t.getMinutes(),
    a = t.getSeconds();
  return t.getFullYear() + "-" + (10 > e ? "0" + e : "" + e) + "-" + (10 > n ? "0" + n : "" + n) + " " + (10 > i ? "0" + i : "" + i) + ":" + (10 > s ? "0" + s : "" + s) + ":" + (10 > a ? "0" + a : "" + a);
}, com.strDate = function (t) {
  switch (t.length) {
    case 8:
      var t = t.split(":"),
        e = new Date();
      return e.setTime(0), e.setUTCHours(t[0]), e.setUTCMinutes(t[1]), e.setUTCSeconds(t[2]), e;
    case 10:
      return t = t.split("-"), new Date(t[0], t[1] - 1, t[2], 0, 0, 0);
    case 19:
      return e = t.split(" "), t = e[0].split("-"), e = e[1].split(":"), new Date(t[0], t[1] - 1, t[2], e[0], e[1], e[2]);
    default:
      throw "Invalid date format : " + t;
  }
};
com.cca = function (t, e) {
  var n = t.charCodeAt(e);
  return n != n ? void 0 : n;
};
com.substr = function (t, e, n) {
  return null != e && 0 != e && null != n && 0 > n ? "" : (null == n && (n = t.length), 0 > e ? (e = t.length + e, 0 > e && (e = 0)) : 0 > n && (n = t.length + n - e), t.substr(e, n));
};
com.remove = function (t, e) {
  var n = t.indexOf(e);
  return -1 == n ? !1 : (t.splice(n, 1), !0);
};
com.iter = function (t) {
  return {
    cur: 0,
    arr: t,
    hasNext: function hasNext() {
      return this.cur < this.arr.length;
    },
    next: function next() {
      return this.arr[this.cur++];
    }
  };
};

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcR2FtZVxcU2NyaXB0c1xcaGV4LWxpbmVzLWdhbWVcXGJhc2VcXGNvbS5qcyJdLCJuYW1lcyI6WyJjb20iLCJkYXRlU3RyIiwidCIsImUiLCJnZXRNb250aCIsIm4iLCJnZXREYXRlIiwiaSIsImdldEhvdXJzIiwicyIsImdldE1pbnV0ZXMiLCJhIiwiZ2V0U2Vjb25kcyIsImdldEZ1bGxZZWFyIiwic3RyRGF0ZSIsImxlbmd0aCIsInNwbGl0IiwiRGF0ZSIsInNldFRpbWUiLCJzZXRVVENIb3VycyIsInNldFVUQ01pbnV0ZXMiLCJzZXRVVENTZWNvbmRzIiwiY2NhIiwiY2hhckNvZGVBdCIsInN1YnN0ciIsInJlbW92ZSIsImluZGV4T2YiLCJzcGxpY2UiLCJpdGVyIiwiY3VyIiwiYXJyIiwiaGFzTmV4dCIsIm5leHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsR0FBRyxHQUFHLFNBQU5BLEdBQUdBLENBQUEsRUFBYSxDQUFDLENBQUM7QUFFdEJBLEdBQUcsQ0FBQ0MsT0FBTyxHQUFHLFVBQVNDLENBQUMsRUFBRTtFQUN0QixJQUFJQyxDQUFDLEdBQUdELENBQUMsQ0FBQ0UsUUFBUSxFQUFFLEdBQUcsQ0FBQztJQUN4QkMsQ0FBQyxHQUFHSCxDQUFDLENBQUNJLE9BQU8sRUFBRTtJQUNmQyxDQUFDLEdBQUdMLENBQUMsQ0FBQ00sUUFBUSxFQUFFO0lBQ2hCQyxDQUFDLEdBQUdQLENBQUMsQ0FBQ1EsVUFBVSxFQUFFO0lBQ2xCQyxDQUFDLEdBQUdULENBQUMsQ0FBQ1UsVUFBVSxFQUFFO0VBQ2xCLE9BQU9WLENBQUMsQ0FBQ1csV0FBVyxFQUFFLEdBQUcsR0FBRyxJQUFJLEVBQUUsR0FBR1YsQ0FBQyxHQUFHLEdBQUcsR0FBR0EsQ0FBQyxHQUFFLEVBQUUsR0FBR0EsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLEVBQUUsR0FBR0UsQ0FBQyxHQUFHLEdBQUcsR0FBR0EsQ0FBQyxHQUFFLEVBQUUsR0FBR0EsQ0FB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LElBQUksQ0FBQyxHQUFHRSxDQUFDLEtBQUtBLENBQUMsR0FBR0gsQ0FBQyxDQUFDYSxNQUFNLEdBQUdWLENBQUMsR0FBR0YsQ0FBQyxDQUFDLEVBQUVELENBQUMsQ0FBQ3NCLE1BQU0sQ0FBQ3JCLENBQUMsRUFBRUUsQ0FBQyxDQUFDLENBQUM7QUFDeEwsQ0FBQztBQUNETCxHQUFHLENBQUN5QixNQUFNLEdBQUcsVUFBU3ZCLENBQUMsRUFBRUMsQ0FBQyxFQUFFO0VBQ3hCLElBQUlFLENBQUMsR0FBR0gsQ0FBQyxDQUFDd0IsT0FBTyxDQUFDdkIsQ0FBQyxDQUFDO0VBQ3BCLE9BQU8sQ0FBRSxDQUFDLElBQUlFLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSUgsQ0FBQyxDQUFDeUIsTUFBTSxDQUFDdEIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQy9DLENBQUM7QUFDREwsR0FBRyxDQUFDNEIsSUFBSSxHQUFHLFVBQVMxQixDQUFDLEVBQUU7RUFDbkIsT0FBTztJQUNIMkIsR0FBRyxFQUFFLENBQUM7SUFDTkMsR0FBRyxFQUFFNUIsQ0FBQztJQUNONkIsT0FBTyxFQUFFLFNBQUFBLFFBQUEsRUFBVztNQUNoQixPQUFPLElBQUksQ0FBQ0YsR0FBRyxHQUFHLElBQUksQ0FBQ0MsR0FBRyxDQUFDZixNQUFNO0lBQ3JDLENBQUM7SUFDRGlCLElBQUksRUFBRSxTQUFBQSxLQUFBLEVBQVc7TUFDYixPQUFPLElBQUksQ0FBQ0YsR0FBRyxDQUFDLElBQUksQ0FBQ0QsR0FBRyxFQUFFLENBQUM7SUFDL0I7RUFDSixDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbSA9IGZ1bmN0aW9uKCl7fVxuXG5jb20uZGF0ZVN0ciA9IGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgZSA9IHQuZ2V0TW9udGgoKSArIDEsXG4gICAgbiA9IHQuZ2V0RGF0ZSgpLFxuICAgIGkgPSB0LmdldEhvdXJzKCksXG4gICAgcyA9IHQuZ2V0TWludXRlcygpLFxuICAgIGEgPSB0LmdldFNlY29uZHMoKTtcbiAgICByZXR1cm4gdC5nZXRGdWxsWWVhcigpICsgXCItXCIgKyAoMTAgPiBlID8gXCIwXCIgKyBlOiBcIlwiICsgZSkgKyBcIi1cIiArICgxMCA+IG4gPyBcIjBcIiArIG46IFwiXCIgKyBuKSArIFwiIFwiICsgKDEwID4gaSA/IFwiMFwiICsgaTogXCJcIiArIGkpICsgXCI6XCIgKyAoMTAgPiBzID8gXCIwXCIgKyBzOiBcIlwiICsgcykgKyBcIjpcIiArICgxMCA+IGEgPyBcIjBcIiArIGE6IFwiXCIgKyBhKVxufSxcblxuY29tLnN0ckRhdGUgPSBmdW5jdGlvbih0KSB7XG4gICAgc3dpdGNoICh0Lmxlbmd0aCkge1xuICAgIGNhc2UgODpcbiAgICAgICAgdmFyIHQgPSB0LnNwbGl0KFwiOlwiKSxcbiAgICAgICAgZSA9IG5ldyBEYXRlO1xuICAgICAgICByZXR1cm4gZS5zZXRUaW1lKDApLFxuICAgICAgICBlLnNldFVUQ0hvdXJzKHRbMF0pLFxuICAgICAgICBlLnNldFVUQ01pbnV0ZXModFsxXSksXG4gICAgICAgIGUuc2V0VVRDU2Vjb25kcyh0WzJdKSxcbiAgICAgICAgZTtcbiAgICBjYXNlIDEwOlxuICAgICAgICByZXR1cm4gdCA9IHQuc3BsaXQoXCItXCIpLFxuICAgICAgICBuZXcgRGF0ZSh0WzBdLCB0WzFdIC0gMSwgdFsyXSwgMCwgMCwgMCk7XG4gICAgY2FzZSAxOTpcbiAgICAgICAgcmV0dXJuIGUgPSB0LnNwbGl0KFwiIFwiKSxcbiAgICAgICAgdCA9IGVbMF0uc3BsaXQoXCItXCIpLFxuICAgICAgICBlID0gZVsxXS5zcGxpdChcIjpcIiksXG4gICAgICAgIG5ldyBEYXRlKHRbMF0sIHRbMV0gLSAxLCB0WzJdLCBlWzBdLCBlWzFdLCBlWzJdKTtcbiAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBcIkludmFsaWQgZGF0ZSBmb3JtYXQgOiBcIiArIHRcbiAgICB9XG59XG5jb20uY2NhID0gZnVuY3Rpb24odCwgZSkge1xuICAgIHZhciBuID0gdC5jaGFyQ29kZUF0KGUpO1xuICAgIHJldHVybiBuICE9IG4gPyB2b2lkIDAgOiBuXG59XG5jb20uc3Vic3RyID0gZnVuY3Rpb24odCwgZSwgbikge1xuICAgIHJldHVybiBudWxsICE9IGUgJiYgMCAhPSBlICYmIG51bGwgIT0gbiAmJiAwID4gbiA/IFwiXCI6IChudWxsID09IG4gJiYgKG4gPSB0Lmxlbmd0aCksIDAgPiBlID8gKGUgPSB0Lmxlbmd0aCArIGUsIDAgPiBlICYmIChlID0gMCkpIDogMCA+IG4gJiYgKG4gPSB0Lmxlbmd0aCArIG4gLSBlKSwgdC5zdWJzdHIoZSwgbikpXG59XG5jb20ucmVtb3ZlID0gZnVuY3Rpb24odCwgZSkge1xuICAgIHZhciBuID0gdC5pbmRleE9mKGUpO1xuICAgIHJldHVybiAtIDEgPT0gbiA/ICExIDogKHQuc3BsaWNlKG4sIDEpLCAhMClcbn1cbmNvbS5pdGVyID0gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGN1cjogMCxcbiAgICAgICAgYXJyOiB0LFxuICAgICAgICBoYXNOZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmN1ciA8IHRoaXMuYXJyLmxlbmd0aFxuICAgICAgICB9LFxuICAgICAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFyclt0aGlzLmN1cisrXVxuICAgICAgICB9XG4gICAgfVxufTsiXX0=