{"version":3,"sources":["assets\\Game\\Scripts\\hex-lines-game\\GridManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import IntMap from \"./ds/IntMap\";\r\nimport LineGame from \"./Game\";\r\nimport { R } from \"./Res\";\r\n\r\nexport default class GridManager extends cc.Component\r\n{\r\n    _gridList:IntMap\r\n\r\n    _minCol = null;\r\n\r\n    addGrid(t, e, n) {\r\n        null == this._gridList && (this._gridList = new IntMap)\r\n        if(!this._gridList.exists(t))\r\n            this._gridList.set(t, new IntMap)\r\n        this._gridList.get(t).set(e, n)\r\n    }\r\n\r\n    init(t)\r\n    {\r\n        this._minCol = t\r\n    }\r\n\r\n    start() {\r\n        var t = LineGame.instance._rowCount\r\n        var e = LineGame.instance._tileList\r\n        this._gridList = new IntMap;\r\n        for (var n = 0; t > n;)\r\n        {\r\n            for (var i = n++, s = 0, a = (t / 2 >= i ? this._minCol + i : this._minCol - 1 + t - i) - 1; a > s;) {\r\n                var r = s++\r\n                var o = e[i][r].get_borderPosition()\r\n                var b = e[i][r + 1].get_borderPosition()\r\n                var c = cc.v2((o.x + b.x) / 2,(o.y + b.y) / 2)\r\n                let line = cc.instantiate(R.Line46)\r\n                line.setPosition(c);\r\n                line.active = false;\r\n                line.parent = this.node;\r\n                line.zIndex = 109\r\n                this.addGrid(i + i, r + r + 1, line)\r\n            }\r\n        }\r\n        for (n = 0, i = t / 2 | 0; i > n;)\r\n            for (s = n++, a = t / 2 >= s ? this._minCol + s : this._minCol - 1 + t - s, r = 0; a > r;)\r\n            {\r\n                o = r ++\r\n                for (let m = 0; 2 > m;m++) {\r\n                    var h = e[s][o].get_borderPosition()\r\n                    var u = e[s + 1][o + m].get_borderPosition()\r\n                    h = cc.v2((h.x + u.x) / 2, (h.y + u.y) / 2)\r\n                    let line = null;\r\n                    if(m == 0)\r\n                    {\r\n                        \r\n                        line = cc.instantiate(R.Line37)\r\n                    }else{\r\n                        line = cc.instantiate(R.Line19)\r\n                    }\r\n                    line.setPosition(h);\r\n                    line.active = false;\r\n                    line.parent = this.node;\r\n                    line.zIndex = 109\r\n                    this.addGrid(s + s + 1, o + o + m, line)\r\n                }\r\n            }\r\n        for (n = 0, i = t / 2 | 0; i > n;)\r\n            for (s = n++, s = t - s - 1, a = t / 2 >= s ? this._minCol + s : this._minCol - 1 + t - s, r = 0; a > r;)\r\n            {\r\n                o = r++\r\n                for (var m  = 0; 2 > m;m++) \r\n                {\r\n                    h = e[s][o].get_borderPosition()\r\n                    u = e[s - 1][o + m].get_borderPosition()\r\n                    h = cc.v2((h.x + u.x) / 2, (h.y + u.y) / 2)\r\n                    let line = null;\r\n                    if(m == 0)\r\n                    {\r\n                        line = cc.instantiate(R.Line19)\r\n                    }else{\r\n                        \r\n                        line = cc.instantiate(R.Line37)\r\n                    }\r\n                    line.setPosition(h);\r\n                    line.active = false;\r\n                    line.zIndex = 109\r\n                    line.parent = this.node;\r\n\r\n                    this.addGrid(s + s - 1, o + o + m, line)\r\n                }\r\n            }\r\n                \r\n    }\r\n\r\n    setState(r, c, r1, c1, b) {\r\n        if(this._gridList.exists(r + r1))\r\n        {\r\n            let t = this._gridList.get(r + r1)\r\n            if (t.exists(c + c1))\r\n            {\r\n                let node = t.get(c + c1)\r\n                node.active = b;\r\n            }\r\n        }\r\n    }\r\n}"]}