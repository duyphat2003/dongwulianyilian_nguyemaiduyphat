{
  "__type__": "cc.TextAsset",
  "_name": "qq.d",
  "_objFlags": 0,
  "_native": "",
  "text": "/**\n * Bricks Engine Official API\n */\ndeclare interface Map<T> {\n    [index: string]: T\n}\n\ndeclare interface GAMESTATUSINFO_DRESSINFO {\n    \"atlas\": string,\n    \"json\": string\n}\n\n\n\ndeclare interface GAMESTATUSINFO_DRESSINFO {\n    \"atlas\": string,\n    \"json\": string\n}\n\ndeclare interface GAMESTATUSINFO {\n    \"svrIp\": string,       //游戏推荐ip。开发者可忽略\n    \"gameVersion\": string, //游戏版本号\n    \"isMaster\": number,    //是否房主，1房主，0参加者\n    \"dressPath\": Array<GAMESTATUSINFO_DRESSINFO>,//厘米秀衣服路径\n    \"gameId\": number,      //游戏id\n    \"osVersion\": string,      //系统版本 \"10.3\"\n    \"networkType\": number,      //网络类型 1 电信 ，2 联通 ，3 移动  0: wifi或未知\n    \"roomId\": number,               //房间号\n    \"platform\": string,    //取值为 \"ios\"或\"android\"\n    \"openId\": string, //当前用户的标识\n    \"spriteDesignHeight\": number,//厘米秀小人spine动画的设计高度\n    \"QQVer\": string, //手机qq版本\n    \"isFirstPlay\": number,                 //是否第一次玩 1.第一次玩，0非第一次玩\n    \"skltPath\": GAMESTATUSINFO_DRESSINFO, //厘米秀小人spine骨骼\n    \"port\": number,  //推荐端口 开发者可忽略,\n    \"gameMode\": number,\n    \"aioType\": number,\n    \"avGameId\": number,\n    \"avAccountType\": number,\n    \"avRoomId\": number,\n    \"sessionId\"?: number,\n    \"devPlatform\"?: string, //仅在开发环境下可以，手q环境下无该字段\n    \"avAppId\"?: number,\n    \"src\": number,\n    \"commFlagBits\": number,\n    \"isWhiteUser\": number,\n    \"isFirstInstall\":number,  //是否首次安装    1为首次安装 0非首次安装\n}\n\n/**\n * 全局变量\n */\ndeclare var GameStatusInfo: GAMESTATUSINFO;\n\n\ninterface IFileSystemReadFileParam {\n    path: string,\n    encoding?: string\n}\n\n\ninterface IFileSystemRead {\n    file: Array<IFileSystemReadFileParam>,\n    success?: (obj: object) => void,\n    fail?: (obj: object) => void,\n    complete?: () => void\n}\n\n\ninterface IFileSystemWriteFileParam {\n    path: string,\n    encoding?: string,\n    data: BK.Buffer\n}\n\ninterface IFileSystemWriteOriginFileParam {\n    path: string,\n    encoding?: string,\n    data: ArrayBuffer\n}\n\ninterface IFileSystemWrite {\n    file: Array<IFileSystemWriteOriginFileParam>,\n    success?: (obj: object) => void,\n    fail?: (obj: object) => void,\n    complete?: () => void\n}\n\ninterface IFileSystemZipParam {\n    path: string,\n    zipPath: string\n}\n\ninterface IFileSystemZip {\n    file: Array<IFileSystemZipParam>,\n    success?: (obj: object) => void,\n    fail?: (obj: object) => void,\n    complete?: () => void\n}\n\ninterface IFileSystemUnzipParam {\n    path: string,\n    zipPath: string\n}\n\ninterface IFileSystemUnzip {\n    file: Array<IFileSystemUnzipParam>,\n    success?: (obj: object) => void,\n    fail?: (obj: object) => void,\n    complete?: () => void\n}\n\n\ninterface IImageLoadParam {\n    path: string,\n    format: number\n}\n\ninterface IImagesLoad {\n    file: Array<IImageLoadParam>,\n    success?: (obj: object) => void,\n    fail?: (obj: object) => void,\n    complete?: () => void\n}\n\ninterface IImageLoadImageWithBase64\n{\n    buffer:ArrayBuffer | BK.Buffer\n}\n\ninterface ISaveImage\n{\n    bitmap: ArrayBuffer, //位图数据\n    width: number, //宽\n    height: number,//高\n    path: string, //路径\n    ext: string, //后缀\n    isFlipY?: number //是否上下翻转\n}\n\ninterface ITextreLoadParam {\n    path: string,\n    format: number\n}\n\ninterface ITextureLoad {\n    file: Array<ITextreLoadParam>,\n    success?: (obj: object) => void,\n    fail?: (obj: object) => void,\n    complete?: () => void\n}\n\n\ninterface readDirParam {\n    path: string,\n    needDir?: boolean,\n    success?: (obj: object) => void,\n    fail?: (obj: object) => void,\n    complete?: () => void\n}\n\ninterface IReadDirInfo {\n    errMsg?: string,\n    files?: Array<string>\n}\n\ninterface FileInfo {\n    size: number,\n    atime: number,\n    mtime: number,\n    ctime: number\n}\n\n\n\n/**\n * 加载图片参数\n */\ninterface IImageLoad {\n    image: string | ArrayBuffer | BK.Buffer, \n    format?: number\n}\n\n\ndeclare class BKStorageEventLisener{\n    private storageEmitter:EventEmitter;\n    constructor();\n    /**\n     * \n     * 添加storage 监听回调\n     * \n     * @param name 监听事件 ‘storage’\n     * @param listener 监听回调\n     */\n\n    public addEventListener(name:string,listener:(...args: any[]) => void):void;\n    /**\n     * \n     * 移除storage 监听回调\n     * \n     * @param name 监听事件 ‘storage’\n     * @param listener 监听回调\n     */\n    public removeEventListener(name:string,listener:(...args: any[]) => void):void;\n\n    /**\n     * \n     * 分发storage事件\n     * \n     * @param name 事件名称 ‘storage’\n     * @param event 事件消息内容\n     */\n    public dispatchEvent(name:string,event:BKStorageEvent):void;\n}\n\ndeclare class BKStorage {\n\n    public length:number;\n\n    /**\n     * \n     * storage \n     * \n     * @param type storage 类型\n     */\n    constructor(type:StorageType);\n\n    /**\n     * \n     * 获取对应索引的key\n     * \n     * @param index 索引值\n     */\n    public key(index:number):string|null;\n\n    /**\n     * \n     * 获取key对应的value\n     * \n     * @param key 要获取的key\n     */\n    public getItem(key:string):string|null;\n\n    /**\n     * \n     * 设置key的value\n     * \n     * @param key 需要修改的key\n     * @param value 需要设置的value\n     */\n    public setItem(key:string,value:string):void;\n\n    /**\n     * \n     * 要移除的key\n     * \n     * @param key 要移除的key\n     */\n    public removeItem(key:string):void;\n\n    /**\n     * 清除当前storage 保存的数据 \n     */\n    public clear():void;\n\n    /**\n     * \n     * @param url 绑定当前storage 到url\n     */\n    private bindUrl(url:string):void;\n\n    [name:string]:any;\n}\n\n\ndeclare namespace BK {\n\n\n\n    let fileSystem: FileSystem;\n    let taskManager: TaskManager;\n    let storageEventListener : BKStorageEventLisener;  \n    let localStorage:BKStorage;\n    let sessionStorage:BKStorage;\n     function getStorageData(gameId:number):string;\n    function setStorageData(data:string,gameId:number):void;\n    interface SpriteNineInitParam{\n        texture:BK.Texture \n        textureWidth?:number\n        textureHeight?:number\n        grid?:Grid\n        offset?:BK.SpritePosition\n        rotated?:boolean\n    }\n\n    interface Grid{\n        top:number,\n        bottom:number,\n        left:number,\n        right:number\n    }\n\n    enum RepeatMode{\n        mirrorRepeat = 0,  //镜像重复\n        repeatToEdge = 1,  //重复至边缘\n        selfRepeat = 2  //重复整个图片\n    }\n\n    interface LoadSetParam{\n        jsonPath:string; //图集json文件路径\n        texturePath:string;  //图集png文件路径\n        format?:number  //资源格式  （可选，默认为RGBA8888）6代表RGBA8888,4代表RGBA4444\n        minFilter?:number //缩小采样方式  （可选，默认为1） 0最近采样 1线性采样\n        magFilter?:number //放大采样方式  （可选，默认为1）0最近采样 1线性采样\n        uWrap?:BK.RepeatMode //u轴重复方式    （可选，默认为1） 0镜像重复，1重复至边缘，2重复\n        vWrap?:BK.RepeatMode //v轴重复方式    （可选，默认为1） 0镜像重复，1重复至边缘，2重复\n    }\n\n    interface SpriteInfo{\n        filename:string\n        width:number\n        height:number\n    }\n\n    /**\n     * 九宫图\n     */\n    class SpriteNine{\n\n        constructor(initParam:SpriteNineInitParam)\n\n        /**\n         * 设置大小\n         * @param size \n         */\n        setSize(size:BK.SpriteSize):void\n\n        /**\n         * 设置位置\n         * @param position \n         */\n        setPosition(position:BK.SpritePosition):void\n    }\n\n    /**\n     * 图集\n     */\n    class SpriteSetCache{\n\n        /**\n         * 加载图集\n         * @param {LoadSetParam}param \n         */\n        static loadSet(param:LoadSetParam):void\n\n        /**\n         * 从图集中获取精灵\n         * @param {SpriteInfo} spriteInfo \n         */\n        static getSprite(spriteInfo:SpriteInfo):BK.Sprite|null \n\n        /**\n         * 根据图片路径移除图集\n         * @param {string} texturePath 文件路径\n         */\n        static removeSet(texturePath:string):void\n\n        /**\n         * 根据图集文件中小图的名称获取大图的纹理\n         * @param {string} filename 图集文件中小图的名称\n         */\n        static getTextureByFilename(filename:string):BK.Texture|null\n\n        /**\n         * 根据图集文件中小图名称，获取小图的位置信息\n         * @param {string} filename 图集文件中小图的名字\n         */\n        static getFrameInfoByFilename(filename:string):SheetFrameInfo|null;\n\n        /**\n         * 根据图集文件中小图名称，获取小图的位置信息和大图的纹理对象\n         * @param {string} filename 图集文件中小图的名字\n         */\n        static getTextureInfoByFilename(filename:string):TextureInfo|null;\n\n        /**\n         * 根据图集文件中小图名称，获取大图纹理路径名称\n         * @param {string} filename 图集文件中小图的名字\n         */\n        static getTexturePathByFilename(filename:string) : string|null\n\n        /**\n         * 根据图集文件中小图名称，创建一个图集精灵对象\n         * @param {SpriteInfo} spriteInfo 创建图集所需参数\n         */\n        static createSpriteSet(spriteInfo:SpriteInfo):BK.SpriteSet|null\n\n    }\n\n    interface SpriteSetInitParam{\n        textureInfo:BK.TextureInfo;\n        width?:number;\n        height?:number;\n        flipU?:number;\n        flipV?:number;\n        stretchX?:number;\n        stretchY?:number;\n    }\n\n    class SpriteSet extends Sprite{\n        constructor(initParam:BK.SpriteSetInitParam)\n    }\n\n    interface SheetRect{\n        x:number,\n        y:number,\n        width:number,\n        height:number\n    }\n\n    interface SheetSize{\n        width:number,height:number\n    }\n\n    interface SheetPoint{\n        x:number,y:number\n    }\n\n    interface SheetFrameInfo{\n        filename:string,\n        frame: SheetRect,\n        rotated: boolean,\n        trimmed: boolean,\n        spriteSourceSize: SheetRect,\n        sourceSize: SheetSize,\n    }\n\n    interface TextureInfo\n    {\n        texturePath:string,\n        frameInfo:SheetFrameInfo,\n        texture:BK.Texture|null\n    }\n\n    //AnimationSprite\n    interface AnimationSpriteInfo{\n        animationSprite:BK.AnimationSprite;\n        count: number;\n    }\n\n    interface Anchor{\n        x:number,\n        y:number\n    }\n\n    interface SpritePosition{\n        x:number,\n        y:number\n    }\n\n    interface SpriteSize{\n        width:number,\n        height:number\n    }\n\n    interface AnimationSpritePlayParam{\n        beginFrameIndex:number,\n        repeatCount:number;\n    }\n\n    interface AnimationSpriteStopParam{\n        frameIndex:number\n    }\n\n    /**\n     * 帧动画\n     */\n    class AnimationSprite extends BK.Sprite{\n\n        constructor(sheetTextureInfoArray:Array<BK.TextureInfo>)\n\n        /**\n         * 播放帧动画\n         * @param {BK.AnimationSpritePlayParam} param \n         */\n        play(param?:BK.AnimationSpritePlayParam):void\n\n\n        /**\n         * 停止帧动画 \n         * @param {number} frameIndex 停止后要显示的帧序号  默认为当前帧\n         */\n        stop(frameIndex?:number):void\n\n        /**\n         * 设置显示的位置 默认{x:0, y:0}\n         * @param {BK.SpritePosition} position \n         */\n        setPosition(position:BK.SpritePosition):void\n\n        /**\n         * 设置显示的大小\n         * @param {BK.SpriteSize} size \n         */\n        setSize(size:BK.SpriteSize):void\n\n        /**\n         * 锚点  默认{x:0,y:0}\n         * 默认为图片左下角\n         * @param anchor \n         */\n        setAnchor(anchor:BK.Anchor):void\n\n        /**\n         * 设置帧动画 每一帧的时长，单位为秒  默认为1/30\n         * @param {number} duration 每帧时长 单位：秒\n         */\n        setFrameDuration(duration:number):void\n\n        /**\n         * 暂停帧动画 可以通过resume()恢复\n         */\n        pause():void\n\n        /**\n         * 继续帧动画\n         */\n        resume():void\n\n        /**\n         * 每播放完成一次时回调\n         * @param completeCallback \n         */\n        setCompleteCallback(completeCallback:(info:BK.AnimationSpriteInfo)=>void):void\n\n        /**\n         * 全部播放完成时回调\n         * @param endCallback \n         */\n        setEndCallback(endCallback:(info:BK.AnimationSpriteInfo)=>void):void\n    }\n\n\n    export const enum  QQGetUserInfoMask{\n        nick=1,\n        head= 2\n    }\n    export interface QQUserInfoHeadBufferInfo\n    {\n        buffer:BK.Buffer;\n        width:number;\n        height:number;\n    }\n    export interface QQUserInfo{\n        openId:string;\n        nick:string;\n        headInfo:QQUserInfoHeadBufferInfo;\n    }\n   \n    //手Q相关\n    export class QQ {\n        static getRankListWithoutRoom(attr: string, order: number, rankType: number, arg3: (errCode: any, cmd: any, data: any) => void);\n        static uploadScoreWithoutRoom(arg0: number, data: { userData: { openId: string; startMs: string; endMs: string; scoreInfo: { score: any; }; }[]; attr: { score: { type: string; order: number; }; }; }, arg2: (errCode: any, cmd: any, data: any) => void);\n        static skipGame(gameId: any, arg1: string);\n        static loadGameData(arg0: (errCode: any, cmd: any, data: any) => void);\n        \n        static saveGameData(data: any, arg1: (errCode: any, cmd: any, data: any) => void);\n        static createShortCut(extendInfo: string);\n\n        /**\n         * 批量获取头像、昵称\n         * @param mask \n         * @param openIdList \n         * @param callback \n         */\n        static getUserInfo(mask:BK.QQGetUserInfoMask,openIdList:Array<string>,callback:(errCode:number,userInfos:Array<BK.QQUserInfo>)=>void);\n       \n        /**\n         * 通知手q,用户点击了缩小按钮\n         * \n         * @static\n         * @memberof QQ\n         */\n        static notifyHideGame();\n\n        /**\n         * 通知手q,用户点击了关闭按钮\n         * \n         * @static\n         * @memberof QQ\n         */\n        static notifyCloseGame();\n\n        /**\n         * 通知手q,游戏即将开始\n         * \n         * @static\n         * @memberof QQ\n         */\n        static notifyReadyGame();\n\n        /**\n         * 通知手q,等待玩家加入\n         * \n         * @static\n         * @memberof QQ\n         */\n        static notifyGameTipsWaiting();\n\n        /**\n         * 通知手q,新玩家加入房间\n         * @param nick 昵称\n         * @memberof QQ\n         */\n        static notifyGameTipsSomeOneJoinRoom(nick: string);\n\n        /**\n         * 通知手q,游戏进行中\n         * \n         * @static\n         * @memberof QQ\n         */\n        static notifyGameTipsPlaying();\n\n        /**\n         * 通知手q,游戏已结束\n         * \n         * @static\n         * @memberof QQ\n         */\n        static notifyGameTipsGameOver()\n\n        /**\n         * 邀请好友加入游戏。支持手q/微信\n         * \n         * @static\n         * @param {string} wording 文案\n         */\n        static inviteFriend(wording: string);\n\n        /**\n         * 查询是否关注公众号\n         * \n         * @static\n         * @param {any} puin \n         * @param {any} callback \n         * @memberof QQ\n         */\n        static checkPubAccountState(puin: string, callback: (errorCode: number, cmd: string, data: object) => void);\n\n        /**\n         * 进入公众号资料卡\n         * \n         * @static\n         * @param {any} puin \n         * @memberof QQ\n         */\n        static enterPubAccountCard(puin: string): void;\n\n        /**\n         * \n         * @param callback \n         */\n        static addSSOJoinRoomCallBack(callback: (err: number, cmd: string, data: any) => void): void;\n\n        static notifyJoinRoom(newJoinPlayers: Array<any>, data: any, errCode: number);\n\n        static notifyNewRoom(roomId: number, ret: number): void;\n\n        static ssoJoinRoomCallback(errCode: number, cmd: string, data: any);\n\n        static notifyStartGameSrv();\n\n        /**\n         * \n         * @param newJoinPlayers \n         * @param roomid \n         * @param isCreator  1为创建者\n         */\n        static notifyNewOrJoinRoomSrv(newJoinPlayers: Array<any>, roomid: number, isCreator: number);\n\n        /**\n         * 释放需要告知sso服务器\n         */\n        static isNeedSSOServer: boolean;\n\n        /**\n         * 自动发送加入房间消息\n         */\n        static isAutoSendJoinRoomNotify: boolean;\n\n        /**\n         * 房间容量\n         */\n        static roomVol: number;\n\n        /**\n         * 设置ark\n         * @param wording \n         */\n        static setArkData(wording: string): void;\n\n        /**\n         * 数据上报玩一玩统一报表\n         * \n         * @static\n         * @param {string} action \n         * @param {string} enter \n         * @param {string} result \n         * @param {string} param1 \n         * @param {string} param2 \n         * @param {any} param3 \n         * @memberof QQ\n         */\n        static uploadData(action:string, enter:string, result:string, param1:string, param2:string, param3)\n\n        /**\n         * 游戏内主动分享\n         * \n         * @static\n         * @param {ShareReturnInfo} shareInfo 分享的数据\n         * @param {(retCode:number,shareType:BK.ShareDest,isFirstShare:boolean)=>void} callback 回调\n         * @memberof QQ\n         */\n        static share(shareInfo:ShareReturnInfo,callback:(retCode:number,shareDest:BK.ShareDest,isFirstShare:boolean)=>void);\n\n        static shareToArk(roomId, summary, picUrl, isSelectFriend, extendInfo, callback?:any): void;\n    \n        static queryCloudSignature(callback): void;\n    }\n\n\n\n\n    /**\n     * 保持屏幕常亮所需参数\n     */\n    interface KeepScreenOnParam {\n        isKeepOn: boolean  //true为保持常亮  false为取消常亮\n    }\n\n    class Device {\n\n        /**\n         * 保持屏幕常亮\n         * @param {KeepScreenOnParam} param \n         */\n        static keepScreenOn(param: KeepScreenOnParam): void;\n\n    }\n\n\n    /**\n     * 二维码生成成功回调\n     */\n    interface SuccessResult {\n        path: string;\n    }\n\n    /**\n     * 二维码生成失败回调\n     */\n    interface FailResult {\n        msg: string;\n    }\n\n    /**\n     * 二维码颜色参数\n     */\n    interface RGBA {\n        r: number;\n        g: number;\n        b: number;\n        a: number;\n    }\n    /**\n     * 二维码纠错等级\n     */\n    enum QRErrorCorrectLevel {\n        L = 1,\n        M = 0,\n        Q = 3,\n        H = 2\n    }\n\n    /**\n     * 二维码生成所需配置\n     */\n    interface QRCodeConfig {\n        width?: number;//默认值 256\n        height?: number; //默认值 256\n        colorDark?: RGBA; //默认值 {r:0.0,g:0.0,b:0.0,a:1.0}\n        colorLight?: RGBA;//默认值 {r:1.0,g:1.0,b:1.0,a:1.0}\n        correctLevel?: QRErrorCorrectLevel; //默认值 2\n    }\n\n    /**\n     * 异步生成二维码所需参数\n     */\n    interface QRCodeParam {\n        path: string;  //图片生成位置  只能在GameSandBox://目录及其子目录\n        content: string;  //二维码内容\n        config?: QRCodeConfig;  //二维码生成所需参数\n        success: (succObj: SuccessResult) => void;\n        fail: (err: Error) => void;\n        complete?: () => void;\n    }\n\n    /**\n     * 同步生成二维码所需参数\n     */\n    interface QRCodeSyncParam {\n        path: string;  //图片生成位置  只能在GameSandBox://目录及其子目录\n        content: string;  //二维码内容\n        config?: QRCodeConfig;  //二维码生成所需参数\n    }\n\n    class QRCode {\n        /**\n         * 生成二维码图片到指定位置  同步\n         * @param {QRCodeSyncParam} param\n         */\n        static makeQRCodeToFileSync(param: QRCodeSyncParam): void;\n\n        /**\n         * 生成二维码图片到指定位置  异步\n         * @param {QRCodeParam} param\n         */\n        static makeQRCodeToFile(param: QRCodeParam): void;\n    }\n\n\n    interface Error {\n        msg: string;\n    }\n\n    /**\n     * 加密失败结果\n     */\n    interface CryptError {\n        msg: string;\n    }\n\n    /**\n     * 加密成功结果\n     */\n    interface CryptResult {\n        data: string;\n    }\n\n    interface CryptCommonParam {\n        success: (succObj: CryptResult) => void;\n        fail: (failObj: CryptError) => void;\n        complete?: () => void;\n    }\n\n    /**\n     * MD5加密参数\n     */\n    interface CryptParam extends CryptCommonParam {\n        data: string;\n    }\n\n    /**\n     * HAMC-MD5加密参数\n     */\n    interface HMACParam extends CryptCommonParam {\n        key: string;\n        data: string;\n    }\n\n    interface CryptSyncParam {\n        data: string | Array<number>;\n    }\n\n    interface HMACSyncParam {\n        key: string | Array<number>;\n        data: string | Array<number>;\n    }\n\n    class Crypt {\n\n        /**\n         * 对data进行md5加密  结果以小写十六进制串形式回调\n         * @param {CryptParam} param data必须为字符串\n         */\n        static md5ToHex(param: CryptParam): void\n\n        /**\n         * 对data进行md5加密 并将加密后的结果进行Base64转化\n         * @param {CryptParam} param data必须为字符串\n         */\n        static md5ToBase64(param: CryptParam): void\n\n        /**\n         * 通过key对data进行HMAC-MD5加密， 结果以小写十六进制串形式回调\n         * @param {HMACParam} param data和key必须为字符串\n         */\n        static hmacMd5ToHex(param: HMACParam): void\n\n        /**\n         * 通过key对data进行HMAC-MD5加密，并将结果进行Base64转化\n         * @param {HMACParam} param data和key必须为字符串\n         */\n        static hmacMd5ToBase64(param: HMACParam): void\n\n        /**\n         * 将data进行sha1加密 并将结果以小写十六进制串回调\n         * @param {CryptParam} param data必须为字符串\n         */\n        static sha1ToHex(param: CryptParam): void\n        /**\n         * 将data进行sha1加密 并将结果进行Base64转化\n         * @param {CryptParam} param data必须为字符串\n         */\n        static sha1ToBase64(param: CryptParam): void\n\n        /**\n         * 使用key对data进行Hmac-sha1加密 并将结果以小写十六进制串回调\n         * @param {HMACParam} param data和key必须为字符串\n         */\n        static hmacSha1ToHex(param: HMACParam): void\n\n        /**\n         * 使用key对data进行Hmac-sha1加密 并将结果进行Base64转化\n         * @param {HMACParam} param data和key必须为字符串\n         */\n        static hmacSha1ToBase64(param: HMACParam): void\n\n        /**\n         * 对data进行md5加密  结果以小写十六进制串形式返回  同步方法\n         * @param {CryptSyncParam} param\n         */\n        static md5ToHexSync(param: CryptSyncParam): string\n\n        /**\n         * 对data进行md5加密 并将加密后的结果进行Base64转化  同步方法\n         * @param {CryptSyncParam} param\n         */\n        static md5ToBase64Sync(param: CryptSyncParam): string\n\n\n        /**\n         * 通过key对data进行HMAC-MD5加密， 结果以小写十六进制串形式返回  同步方法\n         * @param {HMACSyncParam} param\n         */\n        static hmacMd5ToHexSync(param: HMACSyncParam): string\n\n        /**\n         * 通过key对data进行HMAC-MD5加密，并将结果进行Base64转化  同步方法\n         * @param {HMACSyncParam} param\n         */\n        static hmacMd5ToBase64Sync(param: HMACSyncParam): string\n\n\n        /**\n         * 将data进行sha1加密 并将结果以小写十六进制串返回  同步方法\n         * @param {CryptSyncParam} param\n         */\n        static sha1ToHexSync(param: CryptSyncParam): string\n        /**\n         * 将data进行sha1加密 并将结果进行Base64转化  同步方法\n         * @param {CryptSyncParam} param\n         */\n        static sha1ToBase64Sync(param: CryptSyncParam): string\n\n        /**\n     * 使用key对data进行Hmac-sha1加密 并将结果以小写十六进制串返回  同步方法\n     * @param {HMACSyncParam} param\n     */\n        static hmacSha1ToHexSync(param: HMACSyncParam): string\n\n\n        /**\n         * 使用key对data进行Hmac-sha1加密 并将结果进行Base64转化 同步方法\n         * @param {HMACSyncParam} param\n         */\n        static hmacSha1ToBase64Sync(param: HMACSyncParam): string\n\n\n    }\n\n    export namespace MQQ {\n\n        export class Webview {\n            /**\n             * 打开一个webview\n             * \n             * @static\n             * @param {string} url \n             * \n             * @memberof Webview\n             */\n            static open(url: string): void;\n\n            /**\n             * 监听已打开webview的消息\n             * @param callback \n             */\n            static onMessageHandle(callback:(cmd:string, data:any)=>void);\n\n            /**\n             * 打开透明webview\n             * @param url \n             * @param gameOrientation \n             */\n            static openTransparent(url:string, gameOrientation:number);\n        }\n\n        export class SsoRequest {\n            /**\n             * 发送SSO消息\n             * \n             * @static\n             * @param {object} obj 请求的数据\n             * @param {string} cmd 命令字\n             * \n             * @memberof SsoRequest\n             */\n            static send(obj: object, cmd: string);\n\n             /**\n             * H5 与终端通信\n             * \n             * @static\n             * @param {object} obj 请求的数据\n             * @param {string} cmd 命令字\n             * \n             * @memberof SsoRequest\n             */\n            static sendTo(obj: object, cmd: string);\n\n            /**\n             * H5 与终端通信\n             * \n             * @static\n             * @param {object} obj 请求的数据\n             * @param {string} cmd 命令字\n             * \n             * @memberof SsoRequest\n             */\n            static sendSSO(obj: object, cmd: string);\n\n\n\n            /**\n             * 添加某个对象监听某个命令\n             *\n             * @static\n             * @param cmd  命令字\n             * @param target 绑定的对象\n             * @param callback 回调函数\n             */\n            static addListener(cmd: string, target: Object, callback: (errCode: number, cmd: string, data: any) => void);\n\n            /**\n             * 移除某个对象对某个命令的事件监听\n             * \n             * @static\n             * @param {string} cmd 命令字\n             * @param {Object} targer 待解除绑定的对象\n             * \n             * @memberof SsoRequest\n             */\n            static removeListener(cmd: string, targer: Object);\n\n            static listenerInfos:Array<any>;\n\n            /**\n             * 终端->js回调\n             * \n             * @memberof SsoRequest\n             */\n            static callback(errCode:number,cmd:string,data:any);\n\n            //\n\n        }\n\n        export class Account {\n            /**\n             * 获取头像信息\n             * \n             * @static\n             * @param {string} openId \n             * @param {(openId:string,BuffInfo:HeadBufferInfo)=>void} callback \n             * \n             * @memberof Account\n             */\n            static getHead(openId: string, callback: (openId: string, BuffInfo: HeadBufferInfo) => void)\n\n            /**\n             * 获取昵称\n             * \n             * @static\n             * @param {string} openId \n             * @param {(openId:string,nick:string)=>void} callback \n             * \n             * @memberof Account\n             */\n            static getNick(openId: string, callback: (openId: string, nick: string) => void)\n\n            static getHeadEx(openId: string, callback: (openId: string, imgUrl: string) => void);\n        }\n    }\n\n    /**\n     * 分享回调参数\n     */\n    interface ShareResult {\n        retCode: number,\n        shareDest: number,\n        isFirstShare: boolean\n    }\n\n    /**\n     * 网络状态\n     */\n    enum NetworkState {\n        'NoneToMobileNetwork' = 1,\n        'NoneToWifi' = 2,\n        'MobileNetworkToWifi' = 3,\n        'MobileNetworkToNone' = 4,\n        'WifiToNone' = 5,\n        'WifiToMobileNetwork' = 6,\n    }\n\n    /**\n     * 网络状态回调参数\n     */\n    interface NetworkChangeResult {\n        state: NetworkState;\n    }\n\n    /**\n     * 监听游戏退到后台的事件\n     * 用户按home键将手Q退至后台\n     * @param callback 监听函数\n     */\n    export function onEnterBackground(callback: () => void): void;\n\n    /**\n     * 取消监听游戏退到后台的事件\n     * @param callback 待取消的监听函数\n     */\n    export function offEnterBackground(callback: () => void): void;\n\n    /**\n     * 监听游戏回到前台的事件\n     * 手Q进程从后台回到前台\n     * @param callback 监听函数\n     */\n    export function onEnterForeground(callback: () => void): void;\n\n    /**\n     * 取消监听游戏回到前台的事件\n     * @param callback 待取消的监听函数\n     */\n    export function offEnterForeground(callback: () => void): void;\n\n    /**\n     * 监听游戏关闭事件\n     * 开发者需处理销毁动作：上报用户成绩\n     * @param callback 监听函数\n     */\n    export function onGameClose(callback: () => void): void;\n\n    /**\n     * 取消监听游戏关闭事件\n     * @param callback 待取消的监听函数\n     */\n    export function offGameClose(callback: () => void): void;\n\n    /**\n     * 监听分享事件\n     * @param callback 监听函数\n     */\n    export function onGameShare(callback: () => void): void;\n\n    /**\n     * 取消监听分享事件\n     * @param callback 待取消的监听函数\n     */\n    export function offGameShare(callback: () => void): void;\n\n    /**\n     * 监听分享完成事件\n     * 不代表分享成功，可能是分享失败或取消分享了，需判断retCode字段\n     * @param callback 监听函数\n     */\n    export function onGameShareComplete(callback: (res: ShareResult) => void): void;\n\n    /**\n     * 取消监听分享完成事件\n     * @param callback 待取消的监听函数\n     */\n    export function offGameShareComplete(callback: (res: ShareResult) => void): void;\n\n    /**\n     * 监听网络变化事件\n     * @param callback 监听函数\n     */\n    export function onNetworkChange(callback: (res: NetworkChangeResult) => void): void;\n\n    /**\n     * 取消监听网络变化事件\n     * @param callback 待取消的监听函数\n     */\n    export function offNetworkChange(callback: (res: NetworkChangeResult) => void): void;\n\n    /**\n     * 监听最大化事件\n     * @param callback 监听函数\n     */\n    export function onMaximize(callback: () => void): void;\n\n    /**\n     * 取消监听最大化事件\n     * @param callback 待取消的监听函数\n     */\n    export function offMaximize(callback: () => void): void;\n\n    /**\n     * 监听最小化事件  用户点击\"收起游戏\"\n     * @param callback 监听函数\n     */\n    export function onMinimize(callback: () => void): void;\n\n    /**\n     * 取消监听最小化事件\n     * @param callback 待取消的监听函数\n     */\n    export function offMinimize(callback: () => void): void;\n\n    export class EmitData {\n        event: string;\n        once: boolean;\n        listener: (...args: any[]) => void;\n        constructor(event: string, listener: (...args: any[]) => void, once: boolean);\n    }\n    export class EventEmitter {\n        private _emits;\n        constructor();\n        private __emit_get;\n        private __emit_exists;\n        private __emit_put;\n        private __emit_remove;\n        /**\n         * 添加 listener 函数到名为 eventName 的事件的监听器数组的末尾。\n         * 注意:多次调用并传入相同的 eventName 和 listener 会导致 listener 被添加与调用多次。\n         * @param event\n         * @param listener\n         */\n        on(eventName: string, listener: (...args: any[]) => void): this;\n        /**\n         * 添加一个单次 listener 函数到名为 eventName 的事件\n         * @param eventName\n         * @param listener\n         */\n        once(eventName: string, listener: (...args: any[]) => void): this;\n        /**\n         * 从名为 eventName 的事件的监听器数组中移除指定的 listener。\n         * @param eventName\n         * @param listener\n         */\n        off(eventName: string, listener: (...args: any[]) => void): this;\n        /**\n         * 同步地调用每个注册到名为 eventName 事件的监听\n         * 如果事件有监听器，则返回 true ，否则返回 false\n         * @param eventName\n         * @param args\n         */\n        emit(eventName: string, ...args: any[]): boolean;\n    }\n\n\n    export class Script {\n\n        /**\n         * \n         */\n        static getTouchModeAll: number;\n\n        /**\n         * 渲染模式\n         */\n        static renderMode: number;\n\n        /**\n         * 输出log\n         * @static\n         * @param {number} level \n         * @param {number} errCode \n         * @param {string} info \n         * \n         * @memberof Script\n         */\n        static log(level: number, errCode: number, info: string): void;\n\n        /**\n         * 执行其他js脚本文件\n         * \n         * @static\n         * @param {string} scriptPath \n         * \n         * @memberof Script\n         */\n        static loadlib(scriptPath: string): void;\n\n        /**\n         * 设置堆栈错误回调\n         * @param callback \n         */\n        static setErrorObserver(callback: (message: string, stacktrace: string) => void): void;\n\n        /**\n         * 分包加载\n         * @param scriptPath \n         */\n        static innerLoadLib(scriptPath: string): void;\n    }\n\n    /**\n     * 控制台打印接口\n     */\n    export class Console {\n\n        /**\n         * release版本输出信息\n         * @param msg 信息\n         */\n        static log(...msg: any[]): void;\n\n        /**\n         * debug版本输出信息\n         * @param msg 信息\n         */\n        static debug(...msg: any[]): void;\n\n        /**\n         * release版本输出错误信息\n         * @param msg 错误信息\n         */\n        static error(...msg: any[]): void;\n\n        /**\n         * 开始计时\n         * @param label 标签，用于辨识计时器\n         */\n        static time(label: string): void;\n\n        /**\n         * 结束计时，并打印经过的时间\n         * @param label 标签，用于辨识计时器\n         */\n        static timeEnd(label: string): void;\n    }\n\n    /**\n     *  广告系统\n     */\n    namespace Advertisement {\n        /**\n         * banner组件样式\n         */\n        interface BannerStyle {\n            x: number;\n            y: number;\n            width?: number;\n            height?: number;\n        }\n        /**\n         * banner类型\n         */\n        const enum BannerViewId {\n            STATIC = 1001,\n            DYNAMIC = 1002,\n            SDK = 1003\n        }\n        /**\n         * banner组件创建参数\n         */\n        interface BannerParam {\n            viewId?: BannerViewId;\n            style?: BannerStyle;\n        }\n        const enum BannerErrorCode {\n            Node = 0,\n            InterNal = 1,\n            Frequency = 2,\n            Network = 3,\n            InvalidRequest = 4,\n            NoFill = 5,\n            Server = 6,\n            FormatMisMatch = 7\n        }\n        interface AdError {\n            msg: string;\n            code: BannerErrorCode | number;\n        }\n        class BannerAd extends EmitterEvent {\n            bannerId: number;\n            param: BannerParam;\n            isLoadSucc: boolean;\n            ssoCMD: any;\n            useNative: boolean;\n            needAutoShow: boolean;\n            _innerGameBanner: BK.AdBannerHandler | undefined;\n            static _bannerId(): any;\n            /**\n             * 构造函数\n             * @param param\n             */\n            constructor(param: BannerParam);\n            /**\n             * 展示\n             */\n            show(): void;\n            /**\n             * 隐藏\n             */\n            hide(): void;\n            /**\n             * 销毁\n             */\n            destory(): void;\n            /**\n             * 监听拉取失败事件\n             *\n             * @param func\n             */\n            onError(func: (err: AdError) => void): void;\n            /**\n             * 移除拉取失败事件\n             * @param func\n             */\n            offError(func: (err: AdError) => void): void;\n            /**\n             * 监听加载成功回调\n             *\n             * @param func\n             */\n            onLoad(func: () => void): void;\n            /**\n             * 取消监听加载成功回调\n             * @param func\n             */\n            offLoad(func: () => void): void;\n            private fetch;\n            private _sendSso;\n            private _ssoLoad;\n            private _ssoShow;\n            private _ssoClose;\n            private _ssoHide;\n        }\n        /**\n         * 创建banner 广告组件\n         * @param param 参数\n         */\n        function createBannerAd(param: BannerParam): BannerAd;\n        class VideoAd extends EmitterEvent {\n            handle: BK.AdVideoHandler | undefined;\n            autoShow: boolean;\n            constructor();\n            /**\n             * 展示\n             */\n            show(): void;\n            /**\n             * 监听视频开始播放事件\n             * @param callback\n             */\n            onPlayStart(callback: () => void): void;\n            /**\n             * 取消视频开始播放事件\n             * @param callback\n             */\n            offPlayStart(callback: () => void): void;\n            /**\n             * 监听视频结束播放事件\n             * @param callback\n             */\n            onPlayFinish(callback: () => void): void;\n            /**\n             * 取消视频结束播放事件\n             * @param callback\n             */\n            offPlayFinish(callback: () => void): void;\n            /**\n             * 监听加载成功事件\n             * @param callback\n             */\n            onLoad(callback: () => void): void;\n            /**\n             * 取消加载成功事件\n             * @param callback\n             */\n            offLoad(callback: (...args: any[]) => void): void;\n            /**\n             * 监听错误事件回调\n             * @param callback\n             */\n            onError(callback: (err: AdError) => void): void;\n            /**\n             * 取消监听错误\n             * @param callback\n             */\n            offError(callback: (...args: any[]) => void): void;\n            /**\n             * 监听关闭\n             * @param callback\n             */\n            onClose(callback: (...args: any[]) => void): void;\n            /**\n             * 取消监听关闭\n             * @param callback\n             */\n            offClose(callback: (...args: any[]) => void): void;\n        }\n        function createVideoAd(): VideoAd;\n    }\n\n    namespace UI {\n\n        /**\n         * 失败回调的参数\n         */\n        export interface Error {\n            msg: string;\n        }\n\n        /**\n         * 公共回调参数\n         */\n        export interface CommonParam {\n            complete?: () => void;\n        }\n\n        /**\n         * 显示键盘  参数\n         */\n        export interface ShowKeyboardParam extends CommonParam {\n            defaultText?: string;\n        }\n\n        /**\n         * 更新键盘  参数\n         */\n        export interface UpdateKeyboardParam extends CommonParam {\n            text: string;\n        }\n\n        /**\n         * 监听回调  参数\n         */\n        export interface KeyboardData {\n            text: string;\n        }\n\n\n        /**\n         * 监听键盘输入事件\n         * @param inputListener 监听事件的回调函数\n         */\n        export function onKeyboardInput(inputListener: (data: KeyboardData) => void): void;\n\n        /**\n         * 取消监听键盘输入事件\n         * @param inputListener 监听事件回调函数\n         */\n        export function offKeyboardInput(inputListener: (data: KeyboardData) => void): void;\n\n        /**\n         * 监听用户点击确认按钮时的事件\n         * @param confirmListener 监听事件的回调函数\n         */\n        export function onKeyboardConfirm(confirmListener: (data: KeyboardData) => void): void;\n\n        /**\n         * 取消监听用户点击确认按钮时的事件\n         * @param confirmListener 监听事件的回调函数\n         */\n        export function offKeyboardConfirm(confirmListener: (data: KeyboardData) => void): void;\n\n        /**\n         * 显示输入键盘\n         * @param {ShowKeyboardParam} param 显示键盘所需的参数\n         */\n        export function showKeyboard(param?: ShowKeyboardParam): void;\n\n        /**\n         * 收起键盘\n         * @param {CommonParam} param 收起键盘所需的参数\n         */\n        export function hideKeyboard(param: CommonParam): void;\n\n        /**\n         * 更新输入框的文字\n         * @param {UpdateKeyboardParam} param 更新键盘所需的参数\n         */\n        export function updateKeyboard(param: UpdateKeyboardParam): void;\n\n        /**\n         * 展示 toast 组件，默认 2000 毫秒之后消失\n         * @param object 展示 toast 所需要参数\n         */\n        export function showToast(object:any): void;\n\n        /**\n         * 隐藏 toast 组件\n         * @param object 隐藏 toast 所需要参数\n         */\n        export function hideToast(object:any): void;\n\n\n        /**\n         * 展示 loading 组件 \n         * @param object 展示 loading 所需要参数\n         */\n        export function showLoading(object:any): void;\n\n        /**\n         * 隐藏 loading 组件\n         * @param object 隐藏 loading 所需要参数\n         */\n        export function hideLoading(object:any): void;\n\n\n        /**\n         * 展示 alert 组件\n         * @param object 展示 alert 所需要参数\n         */\n        export function showAlert(object:any): void;\n    }\n\n    /**\n     * 音频相关参数\n     */\n    export namespace Audio {\n        /**\n         * 回调结果\n         */\n        interface Result {\n            code?: number\n            cmd?: string\n            data?: Result\n        }\n        interface AudioPara {\n            src?: string\n            type?: string\n            id?: number\n            loop?: boolean\n            autoPlay?: boolean\n            volume?: number\n            muted?: boolean\n            duration?: number\n            currentTime?: number\n            leftVolume?: number\n            rightVolume?: number\n            complete?: Function\n            loopCount?: number\n            event?: number\n            paused?: boolean\n            data?: AudioPara\n            auto?: boolean\n            audo?: boolean\n            message?: string\n            code?: number\n        }\n    }\n\n    /**\n     * 老的音频接口\n     */\n    export class Audio {\n\n        /**\n         *\n         * @param type  声音类型 0表示背景音乐，1表示特效音乐\n         * @param musicPath 音乐路径 以GameRes://为前缀\n         * @param loopCount 重复次数 -1为循环播放\n         */\n        constructor(type: number, musicPath: string, loopCount: number);\n\n        //播放\n        startMusic(cb: () => void): void;\n\n        //暂停\n        pauseMusic(): void;\n\n        //继续播放\n        resumeMusic(): void;\n\n        //停止播放\n        stopMusic(): void;\n\n        /**\n         * 开关\n         */\n        static switch: boolean;\n\n    }\n    /**\n     * 音频管理类\n     * \n     */\n    export class AudioManager {\n        /**\n         * 暂停所有音频\n         */\n        static pauseAllAudio(): void;\n        /**\n         * 恢复所有音频\n         */\n        static resumeAllAudio(): void;\n        /**\n         * 销毁所有音频\n         */\n        static destroyAllAudio(): void;\n    }\n\n    /**\n     * 音频新接口\n     */\n    export class AudioElement extends EventEmitter {\n        currentTime: number;\n        duration: number;\n        /**\n         * 是否在load完成之后自动播放\n         */\n        autoplay: boolean;\n        paused: boolean;\n        /**\n         * 音量 0到1浮点数\n         */\n        volume: number;\n        muted: boolean;\n        src: string;\n        loop: boolean;\n        pause(): void;\n        /**\n         *\n         * @param {BK.Audio.AudioPara} para\n         * {complete:Function} 播放结束的回调，用于获取effect播放的音频id\n         */\n        play(para?: BK.Audio.AudioPara): void;\n\n        /**\n         * 销毁音频对象释放资源\n         */\n        destroy(): void;\n        seek(time: number): void;\n        load(): void;\n\n        /**\n         * 支持的音频格式，目前只支持mp3\n         * @param {string} type\n         */\n        canPlayType(type: string): void;\n\n\n        /**\n         * effect 接口 恢复音乐\n         * id 播放的音频id\n         */\n        resume(id?: number): void;\n\n        /**\n         * effect 接口 停止音乐\n         * id 播放的音频id\n         */\n        stop(id?: number): void;\n    }\n\n    /**\n     * 音频被中断\n     * @returns {void}\n     */\n    export function onAudioInterruptionStart(callback: Function): void;\n\n    /**\n     * 音频中断取消\n     * @returns {void}\n     */\n    export function onAudioInterruptionEnd(callback: Function): void;\n\n    /**\n     * 创建音频对象，新的音频对象\n     * @param para\n     * @returns {AudioElement}\n     */\n    export function createAudioContext(para?: any): AudioElement;\n\n    export namespace Http {\n\n        export interface HttpRequestOptions {\n            /** 请求URL, 必填 */\n            url: string;\n            /** 请求方法, 默认GET */\n            method?: string;\n            /** 请求头 */\n            headers?: Map<string>;\n            /** 请求体 */\n            body?: string | ArrayBuffer;\n            /**\n             * 请求成功回调, 成功仅代表HTTP请求完成, 不等同于请求成功200\n             * @param succObj\n             */\n            success?: (succObj: SuccessObject) => void;\n            /**\n             * 请求失败回调, 如连接超时等网络错误\n             * @param errObj\n             */\n            fail?: (errObj: ErrorObject) => void;\n            /**\n             * 请求结束回调, 无论请求成功失败都会调用\n             */\n            complete?: () => void;\n            /**\n             * 上传进度\n             * @param curr     当前进度\n             * @param total    总进度\n             */\n            uploadProgress?: (curr: number, total: number) => void;\n            /**\n             * 下载进度\n             * @param curr     当前进度\n             * @param total    总进度, 响应头无Content-Length时为-1\n             */\n            downloadProgress?: (curr: number, total: number) => void;\n        }\n\n        export interface SuccessObject {\n            /** 响应码 */\n            statusCode: number;\n            /**\n             * 响应头\n             * QQ 7.8.0以下 headers为{}\n             */\n            headers: Map<string>;\n\n            /**\n             * 以字符串形式读取响应体, 请求发生错误时返回空字符串''\n             * 没有缓存, 每次调用都会重新读取返回新对象, 不会返回前一次读取的对象\n             */\n            text(): string;\n\n            /**\n             * 以JSON对象形式读取响应体, 已经经过JSON.parse解析, 请求发生错误或响应体为空时返回null\n             * 没有缓存, 每次调用都会重新读取返回新对象, 不会返回前一次读取的对象\n             */\n            jsonObject<T = any>(): T;\n\n            /**\n             * 以ArrayBuffer形式读取响应体, 请求发生错误时返回大小为0的ArrayBuffer\n             * 没有缓存, 每次调用都会重新读取返回新对象, 不会返回前一次读取的对象\n             */\n            arrayBuffer(): ArrayBuffer;\n        }\n\n        export interface ErrorObject {\n            /** 错误原因, 用于调试, 不适合直接展示给用户 */\n            msg: string;\n        }\n\n        /**\n         * 发起HTTP请求\n         * @param options HTTP请求参数 包括url, method, headers, body和回调函数\n         */\n        export function request(options: HttpRequestOptions): void;\n    }\n\n    export interface SsoRequestOptions {\n        reqCmd: string,                 // 请求命令字，必选\n        respCmd?: string,               // 响应命令字，可选，默认同reqCmd\n        data?: any,                     // 请求数据包，可选\n        isListener?: boolean            // 是否监听，可选，默认为true\n        success?: (succObj: {\n            code: number,\n            cmd: string,\n            data: any,\n        }) => void\n        fail?: (failObj: {\n            code: number,\n            cmd: string,\n            data: any,\n        }) => void\n        complete?: () => void\n    }\n\n    export class SsoRequest extends EmitterEvent {\n\n        /**\n         * sso请求\n         * @param options sso请求参数\n         */\n        static request(options: SsoRequestOptions): SsoRequest;\n    }\n\n    /**\n     * 分享接口\n     */\n    export namespace Share {\n\n        export interface ShareOptions {\n            title?: string,         // 分享标题，可选，默认为'轻游戏'\n            summary?: string,       // 分享内容，可选，默认为'一起来玩游戏吧~'\n            extendInfo?: string,    // 扩展信息，可选，默认为‘’\n            qqImgUrl: string,       // 分享到QQ的图片网络链接，必选，仅支持网络链接\n            socialPicPath?: string, // 分享到空间、微信、朋友圈的图片本地路径，可选，默认为游戏二维码，仅支持本地路径\n            msgUrl?: string,        // 详情页的网络链接，分享链接必选\n            isToFriend?: boolean,   // 是否发送给好友，可选\n            range?: {               // 截图范围\n                x: number,          // 横坐标\n                y: number,          // 纵坐标\n                width: number,      // 宽\n                height: number,     // 高\n            },\n            success?: (succObj: {\n                code: number,\n                data: any,\n            }) => void,\n            fail?: (failObj: {\n                code: number,\n                msg: string,\n            }) => void,\n            complete?: () => void,\n        }\n\n        /**\n         * 基础分享接口\n         * @param options 截图参数，imgUrl必选，且必须是网络链接\n         */\n        export function share(options: ShareOptions): void;\n\n        /**\n         * 分享H5链接\n         * @param options 截图参数，imgUrl必选，且必须是网络链接\n         */\n        export function shareLink(options: ShareOptions): void;\n    }\n\n    export class Ticker {\n\n        /**\n         * 每调用60次所需的秒时\n         * 1代表 1秒调用60次。2代表2秒内调用60 。即1代表60帧/秒 2代表 30帧/秒\n         * @type {number}\n         * @memberof Ticker\n         */\n        interval: number;\n\n\n        /**\n         * 暂停\n         * true代表暂停，flase代表运行\n         *\n         * @type {boolean}\n         * @memberof Ticker\n         */\n        paused: boolean;\n\n        /**\n         * Creates an instance of Ticker.\n         *\n         * @memberof Ticker\n         */\n        constructor();\n        /**\n         * 销毁函数\n         *\n         *\n         * @memberof Ticker\n         */\n        dispose(): void;\n\n\n        /**\n         * 设置定时回调函数\n         *\n         * @param {(ts:number,duration:number)=>void} callback\n         *\n         * @memberof Ticker\n         */\n        setTickerCallBack(callback: (ts: number, duration: number) => void): void;\n    }\n\n    /**\n     * 代码实现在brick.js\n     */\n    export class MainTicker extends Ticker {\n        /**\n         * 添加定时回调函数\n         *\n         * @param {(ts:number, duration:number,obj?:any)=>void} callback\n         * @param {*} [obj]\n         * @memberof MainTicker\n         */\n        add(callback: (ts: number, duration: number, obj?: any) => void, obj?: any): void;\n\n        /**\n         * 移除绑定\n         *\n         * @param {*} [obj]\n         * @memberof MainTicker\n         */\n        remove(obj?: any): void;\n\n        /**\n         *\n         * @param func 回调函数\n         * @param millsecond 等候时间，单位为毫秒\n         * @param obj （选填）绑定对象\n         */\n        setTimeout(func: (ts: number, dt: number, object: any) => void, millsecond: number, obj?: any): void;\n\n        /**\n         * 移除绑定对象对应的回调函数\n         *\n         * @param {*} obj\n         */\n        removeTimeout(obj: any): void;\n    }\n    export class Director {\n        /**\n         * 屏幕比例\n         */\n        static screenScale: number;\n\n        /**\n         * 屏幕逻辑大小\n         */\n        static renderSize: Size;\n\n        /**\n         * 屏幕实际像素大小\n         */\n        static screenPixelSize: Size;\n\n        /**\n         * 根节点\n         */\n        static root: Node;\n\n        /**\n         * 帧率\n         */\n        static fps: number;\n\n        /**\n         * 全局定时器\n         */\n        static ticker: BK.MainTicker;\n\n        /**\n         * 是否保持屏幕常量\n         */\n        static isKeepScreenOn: boolean\n\n        static setQAVDelegate(delegate: any): void;\n\n        /**\n         * 附着一个物理引擎中的space至全局环境中\n         *\n         * @param {BK.Physics.Space} attachSpace\n         *\n         * @memberof Director\n         */\n        attachSpace(attachSpace: BK.Physics.Space): void;\n\n\n        //android特有方法\n        static tickerPause(): void;\n        //android特有方法\n        static tickerResume(): void;\n\n        static queryDeviceInfo(): void\n\n    }\n\n    class FileSystem {\n        /**\n         * \n         * 批量异步读取文件\n         * \n         * @param object 读文件参数接口\n         */\n        public readFile(object: IFileSystemRead): void;\n\n        /**\n         * \n         * 批量异步写文件\n         * \n         * @param object 写文件参数接口\n         */\n        public writeFile(object: IFileSystemWrite): void;\n\n        /**\n         * \n         * 批量异步压缩文件\n         * \n         * @param object 压缩文件参数接口\n         */\n        public zip(object: IFileSystemZip): void;\n\n        /**\n         * \n         * 批量异步解压文件\n         * \n         * @param object 解压文件接口\n         */\n        public unzip(object: IFileSystemZip): void;\n\n        /**\n         * \n         * 同步读取文件\n         * \n         * @param filePath 文件路径\n         */\n        public readFileSync(filePath: string): ArrayBuffer;\n\n        /**\n         * \n         * 同步写文件\n         * \n         * @param filePath 文件路径\n         * @param data 文件内容\n         */\n        public writeFileSync(filePath: string, data: ArrayBuffer | string): void;\n\n        /**\n         * \n         * 同步压缩文件\n         * \n         * @param srcPath 待压缩路径\n         * @param targetZip 压缩包路径\n         */\n        public zipSync(srcPath: string, targetZip: string): void;\n\n        /**\n         * \n         * 同步解压文件\n         * \n         * @param srcZip 待解压包路径\n         * @param targetPath 解压路径\n         */\n        public unzipSync(srcZip: string, targetPath: string): void;\n\n        /**\n         * \n         * 创建目录\n         * \n         * @param dirPath 目录路径\n         */\n        public makeDirSync(dirPath: string): void;\n\n        /**\n         * \n         * 删除文件\n         * \n         * @param filePath 文件路径\n         */\n        public unlinkSync(filePath: string): void;\n\n        /**\n         * \n         * 拷贝文件\n         * \n         * @param srcPath 源文件路径\n         * @param destPath 目标文件路径\n         */\n        public copyFileSync(srcPath: string, destPath: string): void;\n\n        /**\n         * \n         * 文件是否存在\n         * \n         * @param path 文件路径\n         */\n        public accessSync(path: string): boolean;\n\n        /**\n         * \n         * 路径是否是目录\n         * \n         * @param path 文件或目录路径\n         */\n        public isDirectory(path: string): boolean;\n\n        /**\n         * \n         * 获取文件信息\n         * \n         * @param file 文件路径\n         */\n        public getFileInfoSync(file: string): FileInfo;\n\n        /**\n         * \n         * 读取目录\n         * \n         * @param object 读文件接口参数\n         */\n        public readDir(object: readDirParam): void;\n    }\n\n\n    class Image {\n\n        buffer: BK.Buffer;\n        format?: number;\n        width: number;\n        height: number;\n\n        /**\n         * \n         * @param config 加载图片参数接口\n         */\n        static loadImages(config: IImagesLoad): void;\n\n        /**\n         * \n         * @param buffer 将要加载的已经过base64编码的数据\n         */\n        static loadImageWithBase64(object:IImageLoadImageWithBase64 | ArrayBuffer | BK.Buffer):BK.Image|null;\n\n        /**\n        * 加载图片\n        */\n        static loadImage(object:IImageLoad|ArrayBuffer|BK.Buffer| any,format?:number): BK.Image;\n\n        /**\n         * 保存图片\n         * @param bitmap \n         * @param width \n         * @param height \n         * @param path \n         * @param ext \n         * @param isFlipY \n         */\n        static saveImage(object:ISaveImage|BK.Buffer|ArrayBuffer,\n            width: number, //宽\n            height: number,//高\n            path: string, //路径\n            ext: string, //后缀\n            isFlipY?: number ): void;\n\n\n\n        /**\n         * info 异步加载图片列表 \n         */\n        static loadImageAsync(info:Array<any>):number;\n\n        /**\n         * \n         * 释放image 数据\n         * \n         * @param buffer 需要释放的image数据\n         */\n        static dispose(buffer:BK.Buffer):void;\n\n    }\n\n    export interface FailInfo {\n        code: FailCode                    // 状态码\n        msg: string                     // 命令字\n    }\n\n    const enum FailCode {\n        DEV_NO_SUPPORT = -1,  //开发工程下不支持分包\n        QQ_NO_SUPPORT = -2,   //QQ版本不支持\n        CONFIG_ERROR = -3,    //gameConfig.json配置无分包相应字段\n        LOAD_FAILD = -4       //加载子包失败\n    }\n\n    interface LoadSubPackageParam {\n        name: string, //子包名\n        success?: () => void,\n        fail?: (info: FailInfo) => void,\n        complete?: () => void,\n    }\n\n    interface LoadSubPackageParam {\n        name: string, //子包名\n        success?: () => void,\n        fail?: (info: FailInfo) => void,\n        complete?: () => void,\n    }\n\n    export class SubPackageTask {\n        constructor(packName: string)\n        onProgressUpdate(callback: (progress: number) => void): void\n    }\n\n    /**\n     * 分包加载\n     * @param param \n     */\n    export function loadSubpackage(param: LoadSubPackageParam): SubPackageTask;\n\n    /**\n     * 是否H5游戏\n     */\n    var isBrowser:boolean;\n\n\n    interface SystemInfo {\n        gameVersion: string,    //游戏版本号\n        isMaster: number,       //是否房主，1房主，0参加者\n        roomId: number,         //房间号\n        gameId: number,         //游戏id\n        osVersion: string,      //系统版本 10.3\n        networkType: number,    //网络类型 1 电信 ，2 联通 ，3 移动  0: wifi或未知\n        platform: string,       //取值为 ios或android\n        openId: string,         //当前用户的标识\n        QQVer: string,          //手机qq版本\n        isFirstInstall:number,  //是否首次安装    1为首次安装 0非首次安装\n        aioType:number,         //当前聊天窗类型    1.双人聊天 4.群 5.讨论组\n        src: number,            //游戏启动入口    100:实时PK，200:聊天窗游戏消息\n        isWhiteUser: number,    //是否为白名单用户，1是，0否\n        gameType:number,        //游戏类型    (手Q7.6.5及以上支持) 0: 普通游戏 1：红包游戏\n        model:string,           //具体机型    (手Q7.6.3及以上支持) 形如 \"PRO 6 Plus\"\n        sex:number ,            //性别    1 男 2 女\n        devPlatform?: string,   //仅在开发环境下可以，手q环境下无该字段\n    }\n    /**\n     * 获取系统信息\n     */\n    function getSystemInfoSync() : SystemInfo;\n\n\n    interface InnerViewOption \n    {\n        orientation?:number, //1（默认，竖屏）2.横屏（home键在左边）3.横屏 （home键在右边）\n        openId?:string, //默认是自己\n        transparent?: boolean,     //是否透明\n        url:string\n    }\n}"
}