{"version":3,"sources":["assets\\Game\\Scripts\\hex-lines-game\\HexonTile.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import Consts from \"./Consts\";\r\nimport LineGame from \"./Game\";\r\nimport { R } from \"./Res\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\nenum TileType\r\n{\r\n    Empty,\r\n    Type1,\r\n    Type2,\r\n    Type3,\r\n    Type4,\r\n    Type5,\r\n    Type6,\r\n    Type7\r\n}\r\n\r\n\r\n@ccclass\r\nexport default class HexonTile extends cc.Component {\r\n    _col: number = 0;\r\n    _row:number = 0;\r\n    _animal:number = 0;\r\n    isChangable = true;\r\n    _isConnecting = false;\r\n    \r\n    connectedTile = null;\r\n    reverseConnectedTile = null;\r\n    targetTile = null;\r\n\r\n    @property({type:cc.Sprite,visible:true,displayName:\"Animal Sprite\"})\r\n    _sprite:cc.Sprite = null;\r\n\r\n    @property({type:cc.Sprite,visible:true,displayName:\"Base Sprite\"})\r\n    _baseSprite = null;\r\n\r\n    animalSprite = null;\r\n\r\n\r\n    _tileType = 0;\r\n\r\n    get_col() {\r\n        return this._col\r\n    }\r\n    set_col(t) {\r\n        return this._col = t,\r\n            t = this._col - (this._row <= LineGame.instance._rowCount / 2 ? LineGame.instance.get_minCol() + this._row: LineGame.instance.get_minCol() - 1 + LineGame.instance._rowCount - this._row) / 2 + .5,\r\n            this._baseSprite.node.x = (Consts.CenterX + t * Consts.ColSize),\r\n            this._col\r\n    }\r\n    get_row() {\r\n        return this._row\r\n    }\r\n    set_row(t) {\r\n        this._row = t\r\n        this._baseSprite.node.y = (Consts.CenterY + (this._row - (LineGame.instance._rowCount / 2 | 0)) * Consts.RowSize)\r\n        return this._row\r\n    }\r\n    get_borderPosition() {\r\n        return this._baseSprite.node.position\r\n        // return cc.v2(this._baseSprite.node.x._value, this._baseSprite.node.y._value)\r\n    }\r\n    get_isConnecting() {\r\n        return this._isConnecting\r\n    }\r\n    set_isConnecting(t) {\r\n        return this._isConnecting = t, this.set_tileType(this._tileType), this._isConnecting\r\n    }\r\n    get_animal() {\r\n        return this._animal\r\n    }\r\n    set_animal(t) {\r\n        switch (this._animal = t, t) {\r\n            case 1:\r\n                this.set_tileType(TileType.Type1);\r\n                break;\r\n            case 2:\r\n                this.set_tileType(TileType.Type2);\r\n                break;\r\n            case 3:\r\n                this.set_tileType(TileType.Type3);\r\n                break;\r\n            case 4:\r\n                this.set_tileType(TileType.Type4);\r\n                break;\r\n            case 5:\r\n                this.set_tileType(TileType.Type5);\r\n                break;\r\n            case 6:\r\n                this.set_tileType(TileType.Type6);\r\n                break;\r\n            case 7:\r\n                this.set_tileType(TileType.Type7);\r\n                break;\r\n            default:\r\n                this.set_tileType(TileType.Empty)\r\n        }\r\n        return this._animal\r\n    }\r\n    \r\n    getTileTexture(t, e, n) {\r\n        if(t == 0 )\r\n        {\r\n            return R.tileTextures[0]\r\n        }else{\r\n            // return e ? R.tileTextures[t] : 1 == n ? R.tileTextures[14 + t] : R.tileTextures[7 + t]\r\n            let idx = 0\r\n            if(e)\r\n            {\r\n                idx = t\r\n            }else{\r\n                if (n){\r\n                    idx = 14 +t \r\n                }else{\r\n                    idx = 7 + t;\r\n                }\r\n            }\r\n            return R.tileTextures[idx];\r\n        }\r\n    }\r\n\r\n\r\n    set_tileType(t:number) {\r\n        this._tileType = t\r\n        // if (null == this._baseSprite )\r\n        // {\r\n        //     // this._baseSprite = new Y\r\n        //     // this._baseSprite.setAnchor(42, 42)\r\n        //     // this.owner.add(this._baseSprite)\r\n        // }\r\n        // if (null == this._sprite )\r\n        // {\r\n        //     // this._sprite = new J(jn.Instance.getTileTexture(this.get_animal(), !1, !1))\r\n        //     // this.owner.addChild((new g).add(this._sprite))\r\n        // } \r\n        if (this.isChangable && this.get_isConnecting() ) \r\n        {\r\n            this._baseSprite.spriteFrame = this.getTileTexture(this.get_animal(),true, false) \r\n        }else{\r\n            let tailTile = this.getTail()\r\n            let sp \r\n            if ( !this.isChangable && null != this.reverseConnectedTile ) \r\n            {\r\n                sp = this.getTileTexture(this.get_animal(), false, true)\r\n            }else{\r\n                if( null == tailTile || tailTile.isChangable)\r\n                {\r\n                    sp = this.getTileTexture(this.get_animal(), false, false) \r\n                }else{\r\n                    sp = this.getTileTexture(this.get_animal(), false, true)\r\n                }\r\n            }\r\n            this._baseSprite.spriteFrame = sp\r\n        }\r\n        return this._tileType;\r\n    }\r\n    onAdded() {\r\n        this.set_tileType(TileType.Empty)\r\n    }\r\n    connect(t) {\r\n        null == t ? null != this.connectedTile && (1 == this.connectedTile.isChangable && this.connectedTile.set_animal(0), this.connectedTile.connect(null), this.connectedTile = this.connectedTile.reverseConnectedTile = null) : (this.connectedTile = t, t.set_animal(this.get_animal()), t.reverseConnectedTile = this)\r\n    }\r\n    getTail() {\r\n        for (var t = this.connectedTile, e = null; null != t;) e = t, t = t.connectedTile;\r\n        return e\r\n    }\r\n    getHead() {\r\n        for (var t = this.reverseConnectedTile, e = null; null != t;) e = t, t = t.reverseConnectedTile;\r\n        return e\r\n    }\r\n    equals(t) {\r\n        return null == t ? !1 : this.get_row() == t.get_row() && this.get_col() == t.get_col()\r\n    }\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n\r\n\r\n    // update (dt) {}\r\n}\r\n"]}